package com.rifeng.p2p.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.rifeng.p2p.entity.PressureResultBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRESSURE_RESULT_BEAN".
*/
public class PressureResultBeanDao extends AbstractDao<PressureResultBean, Long> {

    public static final String TABLENAME = "PRESSURE_RESULT_BEAN";

    /**
     * Properties of entity PressureResultBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ResultId = new Property(0, Long.class, "resultId", true, "_id");
        public final static Property TempTestId = new Property(1, String.class, "tempTestId", false, "TEMP_TEST_ID");
        public final static Property Round = new Property(2, String.class, "round", false, "ROUND");
        public final static Property Result = new Property(3, String.class, "result", false, "RESULT");
        public final static Property GroupPressure = new Property(4, String.class, "groupPressure", false, "GROUP_PRESSURE");
        public final static Property StartPressure = new Property(5, String.class, "startPressure", false, "START_PRESSURE");
        public final static Property EndPressure = new Property(6, String.class, "endPressure", false, "END_PRESSURE");
        public final static Property DecisionStandard = new Property(7, String.class, "decisionStandard", false, "DECISION_STANDARD");
    }


    public PressureResultBeanDao(DaoConfig config) {
        super(config);
    }
    
    public PressureResultBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRESSURE_RESULT_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: resultId
                "\"TEMP_TEST_ID\" TEXT," + // 1: tempTestId
                "\"ROUND\" TEXT," + // 2: round
                "\"RESULT\" TEXT," + // 3: result
                "\"GROUP_PRESSURE\" TEXT," + // 4: groupPressure
                "\"START_PRESSURE\" TEXT," + // 5: startPressure
                "\"END_PRESSURE\" TEXT," + // 6: endPressure
                "\"DECISION_STANDARD\" TEXT);"); // 7: decisionStandard
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_PRESSURE_RESULT_BEAN_TEMP_TEST_ID_DESC_ROUND_DESC ON \"PRESSURE_RESULT_BEAN\"" +
                " (\"TEMP_TEST_ID\" DESC,\"ROUND\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRESSURE_RESULT_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PressureResultBean entity) {
        stmt.clearBindings();
 
        Long resultId = entity.getResultId();
        if (resultId != null) {
            stmt.bindLong(1, resultId);
        }
 
        String tempTestId = entity.getTempTestId();
        if (tempTestId != null) {
            stmt.bindString(2, tempTestId);
        }
 
        String round = entity.getRound();
        if (round != null) {
            stmt.bindString(3, round);
        }
 
        String result = entity.getResult();
        if (result != null) {
            stmt.bindString(4, result);
        }
 
        String groupPressure = entity.getGroupPressure();
        if (groupPressure != null) {
            stmt.bindString(5, groupPressure);
        }
 
        String startPressure = entity.getStartPressure();
        if (startPressure != null) {
            stmt.bindString(6, startPressure);
        }
 
        String endPressure = entity.getEndPressure();
        if (endPressure != null) {
            stmt.bindString(7, endPressure);
        }
 
        String decisionStandard = entity.getDecisionStandard();
        if (decisionStandard != null) {
            stmt.bindString(8, decisionStandard);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PressureResultBean entity) {
        stmt.clearBindings();
 
        Long resultId = entity.getResultId();
        if (resultId != null) {
            stmt.bindLong(1, resultId);
        }
 
        String tempTestId = entity.getTempTestId();
        if (tempTestId != null) {
            stmt.bindString(2, tempTestId);
        }
 
        String round = entity.getRound();
        if (round != null) {
            stmt.bindString(3, round);
        }
 
        String result = entity.getResult();
        if (result != null) {
            stmt.bindString(4, result);
        }
 
        String groupPressure = entity.getGroupPressure();
        if (groupPressure != null) {
            stmt.bindString(5, groupPressure);
        }
 
        String startPressure = entity.getStartPressure();
        if (startPressure != null) {
            stmt.bindString(6, startPressure);
        }
 
        String endPressure = entity.getEndPressure();
        if (endPressure != null) {
            stmt.bindString(7, endPressure);
        }
 
        String decisionStandard = entity.getDecisionStandard();
        if (decisionStandard != null) {
            stmt.bindString(8, decisionStandard);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PressureResultBean readEntity(Cursor cursor, int offset) {
        PressureResultBean entity = new PressureResultBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // resultId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tempTestId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // round
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // result
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // groupPressure
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // startPressure
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // endPressure
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // decisionStandard
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PressureResultBean entity, int offset) {
        entity.setResultId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTempTestId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRound(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setResult(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGroupPressure(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStartPressure(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEndPressure(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDecisionStandard(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PressureResultBean entity, long rowId) {
        entity.setResultId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PressureResultBean entity) {
        if(entity != null) {
            return entity.getResultId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PressureResultBean entity) {
        return entity.getResultId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
