package com.rifeng.p2p.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.rifeng.p2p.entity.UserForeManBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_FORE_MAN_BEAN".
*/
public class UserForeManBeanDao extends AbstractDao<UserForeManBean, Long> {

    public static final String TABLENAME = "USER_FORE_MAN_BEAN";

    /**
     * Properties of entity UserForeManBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FId = new Property(0, Long.class, "fId", true, "_id");
        public final static Property Email = new Property(1, String.class, "email", false, "EMAIL");
    }


    public UserForeManBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserForeManBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_FORE_MAN_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: fId
                "\"EMAIL\" TEXT);"); // 1: email
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_USER_FORE_MAN_BEAN_EMAIL ON \"USER_FORE_MAN_BEAN\"" +
                " (\"EMAIL\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_FORE_MAN_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserForeManBean entity) {
        stmt.clearBindings();
 
        Long fId = entity.getFId();
        if (fId != null) {
            stmt.bindLong(1, fId);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(2, email);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserForeManBean entity) {
        stmt.clearBindings();
 
        Long fId = entity.getFId();
        if (fId != null) {
            stmt.bindLong(1, fId);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(2, email);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserForeManBean readEntity(Cursor cursor, int offset) {
        UserForeManBean entity = new UserForeManBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // fId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // email
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserForeManBean entity, int offset) {
        entity.setFId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEmail(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserForeManBean entity, long rowId) {
        entity.setFId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserForeManBean entity) {
        if(entity != null) {
            return entity.getFId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserForeManBean entity) {
        return entity.getFId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
