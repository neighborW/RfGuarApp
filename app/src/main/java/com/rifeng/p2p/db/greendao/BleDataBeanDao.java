package com.rifeng.p2p.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.rifeng.p2p.entity.BleDataBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BLE_DATA_BEAN".
*/
public class BleDataBeanDao extends AbstractDao<BleDataBean, String> {

    public static final String TABLENAME = "BLE_DATA_BEAN";

    /**
     * Properties of entity BleDataBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ClientId = new Property(0, String.class, "clientId", true, "CLIENT_ID");
        public final static Property Card = new Property(1, String.class, "card", false, "CARD");
        public final static Property Phone = new Property(2, String.class, "phone", false, "PHONE");
        public final static Property GroupId = new Property(3, int.class, "groupId", false, "GROUP_ID");
        public final static Property PressureStart = new Property(4, float.class, "pressureStart", false, "PRESSURE_START");
        public final static Property PressureEnd = new Property(5, float.class, "pressureEnd", false, "PRESSURE_END");
        public final static Property TotalTime = new Property(6, int.class, "totalTime", false, "TOTAL_TIME");
        public final static Property Result = new Property(7, String.class, "result", false, "RESULT");
        public final static Property LastUpdateDate = new Property(8, java.util.Date.class, "lastUpdateDate", false, "LAST_UPDATE_DATE");
        public final static Property CreateDate = new Property(9, java.util.Date.class, "createDate", false, "CREATE_DATE");
        public final static Property Times = new Property(10, int.class, "times", false, "TIMES");
    }


    public BleDataBeanDao(DaoConfig config) {
        super(config);
    }
    
    public BleDataBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BLE_DATA_BEAN\" (" + //
                "\"CLIENT_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: clientId
                "\"CARD\" TEXT," + // 1: card
                "\"PHONE\" TEXT," + // 2: phone
                "\"GROUP_ID\" INTEGER NOT NULL ," + // 3: groupId
                "\"PRESSURE_START\" REAL NOT NULL ," + // 4: pressureStart
                "\"PRESSURE_END\" REAL NOT NULL ," + // 5: pressureEnd
                "\"TOTAL_TIME\" INTEGER NOT NULL ," + // 6: totalTime
                "\"RESULT\" TEXT," + // 7: result
                "\"LAST_UPDATE_DATE\" INTEGER," + // 8: lastUpdateDate
                "\"CREATE_DATE\" INTEGER," + // 9: createDate
                "\"TIMES\" INTEGER NOT NULL );"); // 10: times
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BLE_DATA_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BleDataBean entity) {
        stmt.clearBindings();
 
        String clientId = entity.getClientId();
        if (clientId != null) {
            stmt.bindString(1, clientId);
        }
 
        String card = entity.getCard();
        if (card != null) {
            stmt.bindString(2, card);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
        stmt.bindLong(4, entity.getGroupId());
        stmt.bindDouble(5, entity.getPressureStart());
        stmt.bindDouble(6, entity.getPressureEnd());
        stmt.bindLong(7, entity.getTotalTime());
 
        String result = entity.getResult();
        if (result != null) {
            stmt.bindString(8, result);
        }
 
        java.util.Date lastUpdateDate = entity.getLastUpdateDate();
        if (lastUpdateDate != null) {
            stmt.bindLong(9, lastUpdateDate.getTime());
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(10, createDate.getTime());
        }
        stmt.bindLong(11, entity.getTimes());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BleDataBean entity) {
        stmt.clearBindings();
 
        String clientId = entity.getClientId();
        if (clientId != null) {
            stmt.bindString(1, clientId);
        }
 
        String card = entity.getCard();
        if (card != null) {
            stmt.bindString(2, card);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
        stmt.bindLong(4, entity.getGroupId());
        stmt.bindDouble(5, entity.getPressureStart());
        stmt.bindDouble(6, entity.getPressureEnd());
        stmt.bindLong(7, entity.getTotalTime());
 
        String result = entity.getResult();
        if (result != null) {
            stmt.bindString(8, result);
        }
 
        java.util.Date lastUpdateDate = entity.getLastUpdateDate();
        if (lastUpdateDate != null) {
            stmt.bindLong(9, lastUpdateDate.getTime());
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(10, createDate.getTime());
        }
        stmt.bindLong(11, entity.getTimes());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public BleDataBean readEntity(Cursor cursor, int offset) {
        BleDataBean entity = new BleDataBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // clientId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // card
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // phone
            cursor.getInt(offset + 3), // groupId
            cursor.getFloat(offset + 4), // pressureStart
            cursor.getFloat(offset + 5), // pressureEnd
            cursor.getInt(offset + 6), // totalTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // result
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // lastUpdateDate
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // createDate
            cursor.getInt(offset + 10) // times
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BleDataBean entity, int offset) {
        entity.setClientId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCard(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPhone(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGroupId(cursor.getInt(offset + 3));
        entity.setPressureStart(cursor.getFloat(offset + 4));
        entity.setPressureEnd(cursor.getFloat(offset + 5));
        entity.setTotalTime(cursor.getInt(offset + 6));
        entity.setResult(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLastUpdateDate(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setCreateDate(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setTimes(cursor.getInt(offset + 10));
     }
    
    @Override
    protected final String updateKeyAfterInsert(BleDataBean entity, long rowId) {
        return entity.getClientId();
    }
    
    @Override
    public String getKey(BleDataBean entity) {
        if(entity != null) {
            return entity.getClientId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BleDataBean entity) {
        return entity.getClientId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
