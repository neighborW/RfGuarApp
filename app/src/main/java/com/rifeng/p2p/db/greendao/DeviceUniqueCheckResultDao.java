package com.rifeng.p2p.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.rifeng.p2p.entity.DeviceUniqueCheckResult;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEVICE_UNIQUE_CHECK_RESULT".
*/
public class DeviceUniqueCheckResultDao extends AbstractDao<DeviceUniqueCheckResult, Long> {

    public static final String TABLENAME = "DEVICE_UNIQUE_CHECK_RESULT";

    /**
     * Properties of entity DeviceUniqueCheckResult.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ResultId = new Property(0, Long.class, "resultId", true, "_id");
        public final static Property DeviceCode = new Property(1, String.class, "deviceCode", false, "DEVICE_CODE");
        public final static Property UserId = new Property(2, String.class, "userId", false, "USER_ID");
        public final static Property Result = new Property(3, String.class, "result", false, "RESULT");
    }


    public DeviceUniqueCheckResultDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceUniqueCheckResultDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEVICE_UNIQUE_CHECK_RESULT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: resultId
                "\"DEVICE_CODE\" TEXT," + // 1: deviceCode
                "\"USER_ID\" TEXT," + // 2: userId
                "\"RESULT\" TEXT);"); // 3: result
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_DEVICE_UNIQUE_CHECK_RESULT_DEVICE_CODE_DESC_USER_ID_DESC ON \"DEVICE_UNIQUE_CHECK_RESULT\"" +
                " (\"DEVICE_CODE\" DESC,\"USER_ID\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEVICE_UNIQUE_CHECK_RESULT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DeviceUniqueCheckResult entity) {
        stmt.clearBindings();
 
        Long resultId = entity.getResultId();
        if (resultId != null) {
            stmt.bindLong(1, resultId);
        }
 
        String deviceCode = entity.getDeviceCode();
        if (deviceCode != null) {
            stmt.bindString(2, deviceCode);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
 
        String result = entity.getResult();
        if (result != null) {
            stmt.bindString(4, result);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DeviceUniqueCheckResult entity) {
        stmt.clearBindings();
 
        Long resultId = entity.getResultId();
        if (resultId != null) {
            stmt.bindLong(1, resultId);
        }
 
        String deviceCode = entity.getDeviceCode();
        if (deviceCode != null) {
            stmt.bindString(2, deviceCode);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
 
        String result = entity.getResult();
        if (result != null) {
            stmt.bindString(4, result);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DeviceUniqueCheckResult readEntity(Cursor cursor, int offset) {
        DeviceUniqueCheckResult entity = new DeviceUniqueCheckResult( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // resultId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // deviceCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // result
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DeviceUniqueCheckResult entity, int offset) {
        entity.setResultId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeviceCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setResult(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DeviceUniqueCheckResult entity, long rowId) {
        entity.setResultId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DeviceUniqueCheckResult entity) {
        if(entity != null) {
            return entity.getResultId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DeviceUniqueCheckResult entity) {
        return entity.getResultId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
