package com.rifeng.p2p.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.rifeng.p2p.entity.PipeDiagramModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PIPE_DIAGRAM_MODEL".
*/
public class PipeDiagramModelDao extends AbstractDao<PipeDiagramModel, Long> {

    public static final String TABLENAME = "PIPE_DIAGRAM_MODEL";

    /**
     * Properties of entity PipeDiagramModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property PipeDiagramId = new Property(0, Long.class, "pipeDiagramId", true, "_id");
        public final static Property Id = new Property(1, long.class, "id", false, "ID");
        public final static Property TempTestId = new Property(2, String.class, "tempTestId", false, "TEMP_TEST_ID");
        public final static Property Path = new Property(3, String.class, "path", false, "PATH");
        public final static Property RealPath = new Property(4, String.class, "realPath", false, "REAL_PATH");
        public final static Property OriginalPath = new Property(5, String.class, "originalPath", false, "ORIGINAL_PATH");
        public final static Property CompressPath = new Property(6, String.class, "compressPath", false, "COMPRESS_PATH");
        public final static Property CutPath = new Property(7, String.class, "cutPath", false, "CUT_PATH");
        public final static Property AndroidQToPath = new Property(8, String.class, "androidQToPath", false, "ANDROID_QTO_PATH");
        public final static Property Duration = new Property(9, long.class, "duration", false, "DURATION");
        public final static Property IsChecked = new Property(10, boolean.class, "isChecked", false, "IS_CHECKED");
        public final static Property IsCut = new Property(11, boolean.class, "isCut", false, "IS_CUT");
        public final static Property Position = new Property(12, int.class, "position", false, "POSITION");
        public final static Property Num = new Property(13, int.class, "num", false, "NUM");
        public final static Property MimeType = new Property(14, String.class, "mimeType", false, "MIME_TYPE");
        public final static Property ChooseModel = new Property(15, int.class, "chooseModel", false, "CHOOSE_MODEL");
        public final static Property Compressed = new Property(16, boolean.class, "compressed", false, "COMPRESSED");
        public final static Property Width = new Property(17, int.class, "width", false, "WIDTH");
        public final static Property Height = new Property(18, int.class, "height", false, "HEIGHT");
        public final static Property CropImageWidth = new Property(19, int.class, "cropImageWidth", false, "CROP_IMAGE_WIDTH");
        public final static Property CropImageHeight = new Property(20, int.class, "cropImageHeight", false, "CROP_IMAGE_HEIGHT");
        public final static Property CropOffsetX = new Property(21, int.class, "cropOffsetX", false, "CROP_OFFSET_X");
        public final static Property CropOffsetY = new Property(22, int.class, "cropOffsetY", false, "CROP_OFFSET_Y");
        public final static Property CropResultAspectRatio = new Property(23, float.class, "cropResultAspectRatio", false, "CROP_RESULT_ASPECT_RATIO");
        public final static Property Size = new Property(24, long.class, "size", false, "SIZE");
        public final static Property IsOriginal = new Property(25, boolean.class, "isOriginal", false, "IS_ORIGINAL");
        public final static Property FileName = new Property(26, String.class, "fileName", false, "FILE_NAME");
        public final static Property ParentFolderName = new Property(27, String.class, "parentFolderName", false, "PARENT_FOLDER_NAME");
        public final static Property Orientation = new Property(28, int.class, "orientation", false, "ORIENTATION");
    }


    public PipeDiagramModelDao(DaoConfig config) {
        super(config);
    }
    
    public PipeDiagramModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PIPE_DIAGRAM_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: pipeDiagramId
                "\"ID\" INTEGER NOT NULL ," + // 1: id
                "\"TEMP_TEST_ID\" TEXT," + // 2: tempTestId
                "\"PATH\" TEXT," + // 3: path
                "\"REAL_PATH\" TEXT," + // 4: realPath
                "\"ORIGINAL_PATH\" TEXT," + // 5: originalPath
                "\"COMPRESS_PATH\" TEXT," + // 6: compressPath
                "\"CUT_PATH\" TEXT," + // 7: cutPath
                "\"ANDROID_QTO_PATH\" TEXT," + // 8: androidQToPath
                "\"DURATION\" INTEGER NOT NULL ," + // 9: duration
                "\"IS_CHECKED\" INTEGER NOT NULL ," + // 10: isChecked
                "\"IS_CUT\" INTEGER NOT NULL ," + // 11: isCut
                "\"POSITION\" INTEGER NOT NULL ," + // 12: position
                "\"NUM\" INTEGER NOT NULL ," + // 13: num
                "\"MIME_TYPE\" TEXT," + // 14: mimeType
                "\"CHOOSE_MODEL\" INTEGER NOT NULL ," + // 15: chooseModel
                "\"COMPRESSED\" INTEGER NOT NULL ," + // 16: compressed
                "\"WIDTH\" INTEGER NOT NULL ," + // 17: width
                "\"HEIGHT\" INTEGER NOT NULL ," + // 18: height
                "\"CROP_IMAGE_WIDTH\" INTEGER NOT NULL ," + // 19: cropImageWidth
                "\"CROP_IMAGE_HEIGHT\" INTEGER NOT NULL ," + // 20: cropImageHeight
                "\"CROP_OFFSET_X\" INTEGER NOT NULL ," + // 21: cropOffsetX
                "\"CROP_OFFSET_Y\" INTEGER NOT NULL ," + // 22: cropOffsetY
                "\"CROP_RESULT_ASPECT_RATIO\" REAL NOT NULL ," + // 23: cropResultAspectRatio
                "\"SIZE\" INTEGER NOT NULL ," + // 24: size
                "\"IS_ORIGINAL\" INTEGER NOT NULL ," + // 25: isOriginal
                "\"FILE_NAME\" TEXT," + // 26: fileName
                "\"PARENT_FOLDER_NAME\" TEXT," + // 27: parentFolderName
                "\"ORIENTATION\" INTEGER NOT NULL );"); // 28: orientation
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_PIPE_DIAGRAM_MODEL_ID_DESC_TEMP_TEST_ID_DESC ON \"PIPE_DIAGRAM_MODEL\"" +
                " (\"ID\" DESC,\"TEMP_TEST_ID\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PIPE_DIAGRAM_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PipeDiagramModel entity) {
        stmt.clearBindings();
 
        Long pipeDiagramId = entity.getPipeDiagramId();
        if (pipeDiagramId != null) {
            stmt.bindLong(1, pipeDiagramId);
        }
        stmt.bindLong(2, entity.getId());
 
        String tempTestId = entity.getTempTestId();
        if (tempTestId != null) {
            stmt.bindString(3, tempTestId);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(4, path);
        }
 
        String realPath = entity.getRealPath();
        if (realPath != null) {
            stmt.bindString(5, realPath);
        }
 
        String originalPath = entity.getOriginalPath();
        if (originalPath != null) {
            stmt.bindString(6, originalPath);
        }
 
        String compressPath = entity.getCompressPath();
        if (compressPath != null) {
            stmt.bindString(7, compressPath);
        }
 
        String cutPath = entity.getCutPath();
        if (cutPath != null) {
            stmt.bindString(8, cutPath);
        }
 
        String androidQToPath = entity.getAndroidQToPath();
        if (androidQToPath != null) {
            stmt.bindString(9, androidQToPath);
        }
        stmt.bindLong(10, entity.getDuration());
        stmt.bindLong(11, entity.getIsChecked() ? 1L: 0L);
        stmt.bindLong(12, entity.getIsCut() ? 1L: 0L);
        stmt.bindLong(13, entity.getPosition());
        stmt.bindLong(14, entity.getNum());
 
        String mimeType = entity.getMimeType();
        if (mimeType != null) {
            stmt.bindString(15, mimeType);
        }
        stmt.bindLong(16, entity.getChooseModel());
        stmt.bindLong(17, entity.getCompressed() ? 1L: 0L);
        stmt.bindLong(18, entity.getWidth());
        stmt.bindLong(19, entity.getHeight());
        stmt.bindLong(20, entity.getCropImageWidth());
        stmt.bindLong(21, entity.getCropImageHeight());
        stmt.bindLong(22, entity.getCropOffsetX());
        stmt.bindLong(23, entity.getCropOffsetY());
        stmt.bindDouble(24, entity.getCropResultAspectRatio());
        stmt.bindLong(25, entity.getSize());
        stmt.bindLong(26, entity.getIsOriginal() ? 1L: 0L);
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(27, fileName);
        }
 
        String parentFolderName = entity.getParentFolderName();
        if (parentFolderName != null) {
            stmt.bindString(28, parentFolderName);
        }
        stmt.bindLong(29, entity.getOrientation());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PipeDiagramModel entity) {
        stmt.clearBindings();
 
        Long pipeDiagramId = entity.getPipeDiagramId();
        if (pipeDiagramId != null) {
            stmt.bindLong(1, pipeDiagramId);
        }
        stmt.bindLong(2, entity.getId());
 
        String tempTestId = entity.getTempTestId();
        if (tempTestId != null) {
            stmt.bindString(3, tempTestId);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(4, path);
        }
 
        String realPath = entity.getRealPath();
        if (realPath != null) {
            stmt.bindString(5, realPath);
        }
 
        String originalPath = entity.getOriginalPath();
        if (originalPath != null) {
            stmt.bindString(6, originalPath);
        }
 
        String compressPath = entity.getCompressPath();
        if (compressPath != null) {
            stmt.bindString(7, compressPath);
        }
 
        String cutPath = entity.getCutPath();
        if (cutPath != null) {
            stmt.bindString(8, cutPath);
        }
 
        String androidQToPath = entity.getAndroidQToPath();
        if (androidQToPath != null) {
            stmt.bindString(9, androidQToPath);
        }
        stmt.bindLong(10, entity.getDuration());
        stmt.bindLong(11, entity.getIsChecked() ? 1L: 0L);
        stmt.bindLong(12, entity.getIsCut() ? 1L: 0L);
        stmt.bindLong(13, entity.getPosition());
        stmt.bindLong(14, entity.getNum());
 
        String mimeType = entity.getMimeType();
        if (mimeType != null) {
            stmt.bindString(15, mimeType);
        }
        stmt.bindLong(16, entity.getChooseModel());
        stmt.bindLong(17, entity.getCompressed() ? 1L: 0L);
        stmt.bindLong(18, entity.getWidth());
        stmt.bindLong(19, entity.getHeight());
        stmt.bindLong(20, entity.getCropImageWidth());
        stmt.bindLong(21, entity.getCropImageHeight());
        stmt.bindLong(22, entity.getCropOffsetX());
        stmt.bindLong(23, entity.getCropOffsetY());
        stmt.bindDouble(24, entity.getCropResultAspectRatio());
        stmt.bindLong(25, entity.getSize());
        stmt.bindLong(26, entity.getIsOriginal() ? 1L: 0L);
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(27, fileName);
        }
 
        String parentFolderName = entity.getParentFolderName();
        if (parentFolderName != null) {
            stmt.bindString(28, parentFolderName);
        }
        stmt.bindLong(29, entity.getOrientation());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PipeDiagramModel readEntity(Cursor cursor, int offset) {
        PipeDiagramModel entity = new PipeDiagramModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // pipeDiagramId
            cursor.getLong(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tempTestId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // path
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // realPath
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // originalPath
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // compressPath
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // cutPath
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // androidQToPath
            cursor.getLong(offset + 9), // duration
            cursor.getShort(offset + 10) != 0, // isChecked
            cursor.getShort(offset + 11) != 0, // isCut
            cursor.getInt(offset + 12), // position
            cursor.getInt(offset + 13), // num
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // mimeType
            cursor.getInt(offset + 15), // chooseModel
            cursor.getShort(offset + 16) != 0, // compressed
            cursor.getInt(offset + 17), // width
            cursor.getInt(offset + 18), // height
            cursor.getInt(offset + 19), // cropImageWidth
            cursor.getInt(offset + 20), // cropImageHeight
            cursor.getInt(offset + 21), // cropOffsetX
            cursor.getInt(offset + 22), // cropOffsetY
            cursor.getFloat(offset + 23), // cropResultAspectRatio
            cursor.getLong(offset + 24), // size
            cursor.getShort(offset + 25) != 0, // isOriginal
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // fileName
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // parentFolderName
            cursor.getInt(offset + 28) // orientation
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PipeDiagramModel entity, int offset) {
        entity.setPipeDiagramId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.getLong(offset + 1));
        entity.setTempTestId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRealPath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOriginalPath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCompressPath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCutPath(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAndroidQToPath(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDuration(cursor.getLong(offset + 9));
        entity.setIsChecked(cursor.getShort(offset + 10) != 0);
        entity.setIsCut(cursor.getShort(offset + 11) != 0);
        entity.setPosition(cursor.getInt(offset + 12));
        entity.setNum(cursor.getInt(offset + 13));
        entity.setMimeType(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setChooseModel(cursor.getInt(offset + 15));
        entity.setCompressed(cursor.getShort(offset + 16) != 0);
        entity.setWidth(cursor.getInt(offset + 17));
        entity.setHeight(cursor.getInt(offset + 18));
        entity.setCropImageWidth(cursor.getInt(offset + 19));
        entity.setCropImageHeight(cursor.getInt(offset + 20));
        entity.setCropOffsetX(cursor.getInt(offset + 21));
        entity.setCropOffsetY(cursor.getInt(offset + 22));
        entity.setCropResultAspectRatio(cursor.getFloat(offset + 23));
        entity.setSize(cursor.getLong(offset + 24));
        entity.setIsOriginal(cursor.getShort(offset + 25) != 0);
        entity.setFileName(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setParentFolderName(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setOrientation(cursor.getInt(offset + 28));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PipeDiagramModel entity, long rowId) {
        entity.setPipeDiagramId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PipeDiagramModel entity) {
        if(entity != null) {
            return entity.getPipeDiagramId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PipeDiagramModel entity) {
        return entity.getPipeDiagramId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
