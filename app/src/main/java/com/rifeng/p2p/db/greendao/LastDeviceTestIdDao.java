package com.rifeng.p2p.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.rifeng.p2p.entity.LastDeviceTestId;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LAST_DEVICE_TEST_ID".
*/
public class LastDeviceTestIdDao extends AbstractDao<LastDeviceTestId, String> {

    public static final String TABLENAME = "LAST_DEVICE_TEST_ID";

    /**
     * Properties of entity LastDeviceTestId.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DeviceUniqueId = new Property(0, String.class, "deviceUniqueId", true, "DEVICE_UNIQUE_ID");
        public final static Property TempTestId = new Property(1, String.class, "tempTestId", false, "TEMP_TEST_ID");
    }


    public LastDeviceTestIdDao(DaoConfig config) {
        super(config);
    }
    
    public LastDeviceTestIdDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LAST_DEVICE_TEST_ID\" (" + //
                "\"DEVICE_UNIQUE_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: deviceUniqueId
                "\"TEMP_TEST_ID\" TEXT);"); // 1: tempTestId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LAST_DEVICE_TEST_ID\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LastDeviceTestId entity) {
        stmt.clearBindings();
 
        String deviceUniqueId = entity.getDeviceUniqueId();
        if (deviceUniqueId != null) {
            stmt.bindString(1, deviceUniqueId);
        }
 
        String tempTestId = entity.getTempTestId();
        if (tempTestId != null) {
            stmt.bindString(2, tempTestId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LastDeviceTestId entity) {
        stmt.clearBindings();
 
        String deviceUniqueId = entity.getDeviceUniqueId();
        if (deviceUniqueId != null) {
            stmt.bindString(1, deviceUniqueId);
        }
 
        String tempTestId = entity.getTempTestId();
        if (tempTestId != null) {
            stmt.bindString(2, tempTestId);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public LastDeviceTestId readEntity(Cursor cursor, int offset) {
        LastDeviceTestId entity = new LastDeviceTestId( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // deviceUniqueId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // tempTestId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LastDeviceTestId entity, int offset) {
        entity.setDeviceUniqueId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTempTestId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final String updateKeyAfterInsert(LastDeviceTestId entity, long rowId) {
        return entity.getDeviceUniqueId();
    }
    
    @Override
    public String getKey(LastDeviceTestId entity) {
        if(entity != null) {
            return entity.getDeviceUniqueId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LastDeviceTestId entity) {
        return entity.getDeviceUniqueId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
