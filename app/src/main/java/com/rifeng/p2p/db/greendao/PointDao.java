package com.rifeng.p2p.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.rifeng.p2p.entity.Point;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POINT".
*/
public class PointDao extends AbstractDao<Point, String> {

    public static final String TABLENAME = "POINT";

    /**
     * Properties of entity Point.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property OrderNum = new Property(1, String.class, "orderNum", false, "ORDER_NUM");
        public final static Property GroupId = new Property(2, String.class, "groupId", false, "GROUP_ID");
        public final static Property RoundId = new Property(3, String.class, "roundId", false, "ROUND_ID");
        public final static Property TestId = new Property(4, String.class, "testId", false, "TEST_ID");
        public final static Property StartPressure = new Property(5, String.class, "startPressure", false, "START_PRESSURE");
        public final static Property Point = new Property(6, String.class, "point", false, "POINT");
        public final static Property Pressure = new Property(7, String.class, "pressure", false, "PRESSURE");
    }


    public PointDao(DaoConfig config) {
        super(config);
    }
    
    public PointDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POINT\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"ORDER_NUM\" TEXT," + // 1: orderNum
                "\"GROUP_ID\" TEXT," + // 2: groupId
                "\"ROUND_ID\" TEXT," + // 3: roundId
                "\"TEST_ID\" TEXT," + // 4: testId
                "\"START_PRESSURE\" TEXT," + // 5: startPressure
                "\"POINT\" TEXT," + // 6: point
                "\"PRESSURE\" TEXT);"); // 7: pressure
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POINT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Point entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String orderNum = entity.getOrderNum();
        if (orderNum != null) {
            stmt.bindString(2, orderNum);
        }
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(3, groupId);
        }
 
        String roundId = entity.getRoundId();
        if (roundId != null) {
            stmt.bindString(4, roundId);
        }
 
        String testId = entity.getTestId();
        if (testId != null) {
            stmt.bindString(5, testId);
        }
 
        String startPressure = entity.getStartPressure();
        if (startPressure != null) {
            stmt.bindString(6, startPressure);
        }
 
        String point = entity.getPoint();
        if (point != null) {
            stmt.bindString(7, point);
        }
 
        String pressure = entity.getPressure();
        if (pressure != null) {
            stmt.bindString(8, pressure);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Point entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String orderNum = entity.getOrderNum();
        if (orderNum != null) {
            stmt.bindString(2, orderNum);
        }
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(3, groupId);
        }
 
        String roundId = entity.getRoundId();
        if (roundId != null) {
            stmt.bindString(4, roundId);
        }
 
        String testId = entity.getTestId();
        if (testId != null) {
            stmt.bindString(5, testId);
        }
 
        String startPressure = entity.getStartPressure();
        if (startPressure != null) {
            stmt.bindString(6, startPressure);
        }
 
        String point = entity.getPoint();
        if (point != null) {
            stmt.bindString(7, point);
        }
 
        String pressure = entity.getPressure();
        if (pressure != null) {
            stmt.bindString(8, pressure);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Point readEntity(Cursor cursor, int offset) {
        Point entity = new Point( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // orderNum
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // groupId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // roundId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // testId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // startPressure
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // point
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // pressure
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Point entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setOrderNum(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGroupId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRoundId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTestId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStartPressure(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPoint(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPressure(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Point entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Point entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Point entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
