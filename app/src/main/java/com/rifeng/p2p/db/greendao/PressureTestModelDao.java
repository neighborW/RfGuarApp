package com.rifeng.p2p.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.rifeng.p2p.entity.PressureTestModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRESSURE_TEST_MODEL".
*/
public class PressureTestModelDao extends AbstractDao<PressureTestModel, String> {

    public static final String TABLENAME = "PRESSURE_TEST_MODEL";

    /**
     * Properties of entity PressureTestModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property TempTestId = new Property(0, String.class, "tempTestId", true, "TEMP_TEST_ID");
        public final static Property TestId = new Property(1, String.class, "testId", false, "TEST_ID");
        public final static Property ProjectName = new Property(2, String.class, "projectName", false, "PROJECT_NAME");
        public final static Property Address = new Property(3, String.class, "address", false, "ADDRESS");
        public final static Property PostCode = new Property(4, String.class, "postCode", false, "POST_CODE");
        public final static Property TestTimeStr = new Property(5, String.class, "testTimeStr", false, "TEST_TIME_STR");
        public final static Property TestTime = new Property(6, long.class, "testTime", false, "TEST_TIME");
        public final static Property Company = new Property(7, String.class, "company", false, "COMPANY");
        public final static Property PipeBrandAndType = new Property(8, String.class, "pipeBrandAndType", false, "PIPE_BRAND_AND_TYPE");
        public final static Property TestMethod = new Property(9, String.class, "testMethod", false, "TEST_METHOD");
        public final static Property TestMethodCode = new Property(10, String.class, "testMethodCode", false, "TEST_METHOD_CODE");
        public final static Property CcEmail = new Property(11, String.class, "ccEmail", false, "CC_EMAIL");
        public final static Property CurrentState = new Property(12, String.class, "currentState", false, "CURRENT_STATE");
        public final static Property DeviceUniqueId = new Property(13, String.class, "deviceUniqueId", false, "DEVICE_UNIQUE_ID");
        public final static Property Email = new Property(14, String.class, "email", false, "EMAIL");
        public final static Property Mobile = new Property(15, String.class, "mobile", false, "MOBILE");
        public final static Property UserId = new Property(16, String.class, "userId", false, "USER_ID");
        public final static Property GroupId = new Property(17, String.class, "groupId", false, "GROUP_ID");
        public final static Property TestType = new Property(18, String.class, "testType", false, "TEST_TYPE");
    }


    public PressureTestModelDao(DaoConfig config) {
        super(config);
    }
    
    public PressureTestModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRESSURE_TEST_MODEL\" (" + //
                "\"TEMP_TEST_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: tempTestId
                "\"TEST_ID\" TEXT," + // 1: testId
                "\"PROJECT_NAME\" TEXT," + // 2: projectName
                "\"ADDRESS\" TEXT," + // 3: address
                "\"POST_CODE\" TEXT," + // 4: postCode
                "\"TEST_TIME_STR\" TEXT," + // 5: testTimeStr
                "\"TEST_TIME\" INTEGER NOT NULL ," + // 6: testTime
                "\"COMPANY\" TEXT," + // 7: company
                "\"PIPE_BRAND_AND_TYPE\" TEXT," + // 8: pipeBrandAndType
                "\"TEST_METHOD\" TEXT," + // 9: testMethod
                "\"TEST_METHOD_CODE\" TEXT," + // 10: testMethodCode
                "\"CC_EMAIL\" TEXT," + // 11: ccEmail
                "\"CURRENT_STATE\" TEXT," + // 12: currentState
                "\"DEVICE_UNIQUE_ID\" TEXT," + // 13: deviceUniqueId
                "\"EMAIL\" TEXT," + // 14: email
                "\"MOBILE\" TEXT," + // 15: mobile
                "\"USER_ID\" TEXT," + // 16: userId
                "\"GROUP_ID\" TEXT," + // 17: groupId
                "\"TEST_TYPE\" TEXT);"); // 18: testType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRESSURE_TEST_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PressureTestModel entity) {
        stmt.clearBindings();
 
        String tempTestId = entity.getTempTestId();
        if (tempTestId != null) {
            stmt.bindString(1, tempTestId);
        }
 
        String testId = entity.getTestId();
        if (testId != null) {
            stmt.bindString(2, testId);
        }
 
        String projectName = entity.getProjectName();
        if (projectName != null) {
            stmt.bindString(3, projectName);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(4, address);
        }
 
        String postCode = entity.getPostCode();
        if (postCode != null) {
            stmt.bindString(5, postCode);
        }
 
        String testTimeStr = entity.getTestTimeStr();
        if (testTimeStr != null) {
            stmt.bindString(6, testTimeStr);
        }
        stmt.bindLong(7, entity.getTestTime());
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(8, company);
        }
 
        String pipeBrandAndType = entity.getPipeBrandAndType();
        if (pipeBrandAndType != null) {
            stmt.bindString(9, pipeBrandAndType);
        }
 
        String testMethod = entity.getTestMethod();
        if (testMethod != null) {
            stmt.bindString(10, testMethod);
        }
 
        String testMethodCode = entity.getTestMethodCode();
        if (testMethodCode != null) {
            stmt.bindString(11, testMethodCode);
        }
 
        String ccEmail = entity.getCcEmail();
        if (ccEmail != null) {
            stmt.bindString(12, ccEmail);
        }
 
        String currentState = entity.getCurrentState();
        if (currentState != null) {
            stmt.bindString(13, currentState);
        }
 
        String deviceUniqueId = entity.getDeviceUniqueId();
        if (deviceUniqueId != null) {
            stmt.bindString(14, deviceUniqueId);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(15, email);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(16, mobile);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(17, userId);
        }
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(18, groupId);
        }
 
        String testType = entity.getTestType();
        if (testType != null) {
            stmt.bindString(19, testType);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PressureTestModel entity) {
        stmt.clearBindings();
 
        String tempTestId = entity.getTempTestId();
        if (tempTestId != null) {
            stmt.bindString(1, tempTestId);
        }
 
        String testId = entity.getTestId();
        if (testId != null) {
            stmt.bindString(2, testId);
        }
 
        String projectName = entity.getProjectName();
        if (projectName != null) {
            stmt.bindString(3, projectName);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(4, address);
        }
 
        String postCode = entity.getPostCode();
        if (postCode != null) {
            stmt.bindString(5, postCode);
        }
 
        String testTimeStr = entity.getTestTimeStr();
        if (testTimeStr != null) {
            stmt.bindString(6, testTimeStr);
        }
        stmt.bindLong(7, entity.getTestTime());
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(8, company);
        }
 
        String pipeBrandAndType = entity.getPipeBrandAndType();
        if (pipeBrandAndType != null) {
            stmt.bindString(9, pipeBrandAndType);
        }
 
        String testMethod = entity.getTestMethod();
        if (testMethod != null) {
            stmt.bindString(10, testMethod);
        }
 
        String testMethodCode = entity.getTestMethodCode();
        if (testMethodCode != null) {
            stmt.bindString(11, testMethodCode);
        }
 
        String ccEmail = entity.getCcEmail();
        if (ccEmail != null) {
            stmt.bindString(12, ccEmail);
        }
 
        String currentState = entity.getCurrentState();
        if (currentState != null) {
            stmt.bindString(13, currentState);
        }
 
        String deviceUniqueId = entity.getDeviceUniqueId();
        if (deviceUniqueId != null) {
            stmt.bindString(14, deviceUniqueId);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(15, email);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(16, mobile);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(17, userId);
        }
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(18, groupId);
        }
 
        String testType = entity.getTestType();
        if (testType != null) {
            stmt.bindString(19, testType);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public PressureTestModel readEntity(Cursor cursor, int offset) {
        PressureTestModel entity = new PressureTestModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // tempTestId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // testId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // projectName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // address
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // postCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // testTimeStr
            cursor.getLong(offset + 6), // testTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // company
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // pipeBrandAndType
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // testMethod
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // testMethodCode
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // ccEmail
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // currentState
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // deviceUniqueId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // email
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // mobile
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // userId
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // groupId
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // testType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PressureTestModel entity, int offset) {
        entity.setTempTestId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTestId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProjectName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPostCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTestTimeStr(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTestTime(cursor.getLong(offset + 6));
        entity.setCompany(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPipeBrandAndType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTestMethod(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTestMethodCode(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCcEmail(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCurrentState(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDeviceUniqueId(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setEmail(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setMobile(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setUserId(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setGroupId(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setTestType(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
     }
    
    @Override
    protected final String updateKeyAfterInsert(PressureTestModel entity, long rowId) {
        return entity.getTempTestId();
    }
    
    @Override
    public String getKey(PressureTestModel entity) {
        if(entity != null) {
            return entity.getTempTestId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PressureTestModel entity) {
        return entity.getTempTestId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
