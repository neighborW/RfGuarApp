package com.rifeng.p2p.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.rifeng.p2p.entity.LookupCode;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOOKUP_CODE".
*/
public class LookupCodeDao extends AbstractDao<LookupCode, String> {

    public static final String TABLENAME = "LOOKUP_CODE";

    /**
     * Properties of entity LookupCode.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Item_code = new Property(0, String.class, "item_code", true, "ITEM_CODE");
        public final static Property Sort_no = new Property(1, int.class, "sort_no", false, "SORT_NO");
        public final static Property Item_name = new Property(2, String.class, "item_name", false, "ITEM_NAME");
        public final static Property Id = new Property(3, int.class, "id", false, "ID");
        public final static Property Status = new Property(4, String.class, "status", false, "STATUS");
    }


    public LookupCodeDao(DaoConfig config) {
        super(config);
    }
    
    public LookupCodeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOOKUP_CODE\" (" + //
                "\"ITEM_CODE\" TEXT PRIMARY KEY NOT NULL ," + // 0: item_code
                "\"SORT_NO\" INTEGER NOT NULL ," + // 1: sort_no
                "\"ITEM_NAME\" TEXT," + // 2: item_name
                "\"ID\" INTEGER NOT NULL ," + // 3: id
                "\"STATUS\" TEXT);"); // 4: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOOKUP_CODE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LookupCode entity) {
        stmt.clearBindings();
 
        String item_code = entity.getItem_code();
        if (item_code != null) {
            stmt.bindString(1, item_code);
        }
        stmt.bindLong(2, entity.getSort_no());
 
        String item_name = entity.getItem_name();
        if (item_name != null) {
            stmt.bindString(3, item_name);
        }
        stmt.bindLong(4, entity.getId());
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(5, status);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LookupCode entity) {
        stmt.clearBindings();
 
        String item_code = entity.getItem_code();
        if (item_code != null) {
            stmt.bindString(1, item_code);
        }
        stmt.bindLong(2, entity.getSort_no());
 
        String item_name = entity.getItem_name();
        if (item_name != null) {
            stmt.bindString(3, item_name);
        }
        stmt.bindLong(4, entity.getId());
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(5, status);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public LookupCode readEntity(Cursor cursor, int offset) {
        LookupCode entity = new LookupCode( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // item_code
            cursor.getInt(offset + 1), // sort_no
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // item_name
            cursor.getInt(offset + 3), // id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LookupCode entity, int offset) {
        entity.setItem_code(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSort_no(cursor.getInt(offset + 1));
        entity.setItem_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setId(cursor.getInt(offset + 3));
        entity.setStatus(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(LookupCode entity, long rowId) {
        return entity.getItem_code();
    }
    
    @Override
    public String getKey(LookupCode entity) {
        if(entity != null) {
            return entity.getItem_code();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LookupCode entity) {
        return entity.getItem_code() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
