package com.rifeng.p2p.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.rifeng.p2p.entity.HistoryRecordBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HISTORY_RECORD_BEAN".
*/
public class HistoryRecordBeanDao extends AbstractDao<HistoryRecordBean, Long> {

    public static final String TABLENAME = "HISTORY_RECORD_BEAN";

    /**
     * Properties of entity HistoryRecordBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property PlumberName = new Property(1, String.class, "plumberName", false, "PLUMBER_NAME");
        public final static Property PlumbingCompany = new Property(2, String.class, "plumbingCompany", false, "PLUMBING_COMPANY");
        public final static Property MobilePhone = new Property(3, String.class, "mobilePhone", false, "MOBILE_PHONE");
        public final static Property Email = new Property(4, String.class, "email", false, "EMAIL");
        public final static Property ProjectAddress = new Property(5, String.class, "projectAddress", false, "PROJECT_ADDRESS");
        public final static Property CreateDate = new Property(6, java.util.Date.class, "createDate", false, "CREATE_DATE");
        public final static Property Latitude = new Property(7, double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(8, double.class, "longitude", false, "LONGITUDE");
        public final static Property Result = new Property(9, String.class, "result", false, "RESULT");
    }


    public HistoryRecordBeanDao(DaoConfig config) {
        super(config);
    }
    
    public HistoryRecordBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HISTORY_RECORD_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"PLUMBER_NAME\" TEXT," + // 1: plumberName
                "\"PLUMBING_COMPANY\" TEXT," + // 2: plumbingCompany
                "\"MOBILE_PHONE\" TEXT," + // 3: mobilePhone
                "\"EMAIL\" TEXT," + // 4: email
                "\"PROJECT_ADDRESS\" TEXT," + // 5: projectAddress
                "\"CREATE_DATE\" INTEGER," + // 6: createDate
                "\"LATITUDE\" REAL NOT NULL ," + // 7: latitude
                "\"LONGITUDE\" REAL NOT NULL ," + // 8: longitude
                "\"RESULT\" TEXT);"); // 9: result
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HISTORY_RECORD_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HistoryRecordBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String plumberName = entity.getPlumberName();
        if (plumberName != null) {
            stmt.bindString(2, plumberName);
        }
 
        String plumbingCompany = entity.getPlumbingCompany();
        if (plumbingCompany != null) {
            stmt.bindString(3, plumbingCompany);
        }
 
        String mobilePhone = entity.getMobilePhone();
        if (mobilePhone != null) {
            stmt.bindString(4, mobilePhone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(5, email);
        }
 
        String projectAddress = entity.getProjectAddress();
        if (projectAddress != null) {
            stmt.bindString(6, projectAddress);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(7, createDate.getTime());
        }
        stmt.bindDouble(8, entity.getLatitude());
        stmt.bindDouble(9, entity.getLongitude());
 
        String result = entity.getResult();
        if (result != null) {
            stmt.bindString(10, result);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HistoryRecordBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String plumberName = entity.getPlumberName();
        if (plumberName != null) {
            stmt.bindString(2, plumberName);
        }
 
        String plumbingCompany = entity.getPlumbingCompany();
        if (plumbingCompany != null) {
            stmt.bindString(3, plumbingCompany);
        }
 
        String mobilePhone = entity.getMobilePhone();
        if (mobilePhone != null) {
            stmt.bindString(4, mobilePhone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(5, email);
        }
 
        String projectAddress = entity.getProjectAddress();
        if (projectAddress != null) {
            stmt.bindString(6, projectAddress);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(7, createDate.getTime());
        }
        stmt.bindDouble(8, entity.getLatitude());
        stmt.bindDouble(9, entity.getLongitude());
 
        String result = entity.getResult();
        if (result != null) {
            stmt.bindString(10, result);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public HistoryRecordBean readEntity(Cursor cursor, int offset) {
        HistoryRecordBean entity = new HistoryRecordBean( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // plumberName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // plumbingCompany
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mobilePhone
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // email
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // projectAddress
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // createDate
            cursor.getDouble(offset + 7), // latitude
            cursor.getDouble(offset + 8), // longitude
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // result
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HistoryRecordBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setPlumberName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPlumbingCompany(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMobilePhone(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEmail(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProjectAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCreateDate(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setLatitude(cursor.getDouble(offset + 7));
        entity.setLongitude(cursor.getDouble(offset + 8));
        entity.setResult(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HistoryRecordBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HistoryRecordBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HistoryRecordBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
